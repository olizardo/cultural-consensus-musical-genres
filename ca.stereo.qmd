---
title: "CA of Music Genre Stereotypes"
author: "Omar Lizardo"
date: "`r Sys.Date()`"
execute: 
  eval: true
  echo: true
  output: true
  warning: false
  message: false
---

```{r setup, include=FALSE}
   library(conflicted)
   library(dplyr)
   library(FactoMineR)
   library(ggplot2)
   library(ggrepel)
   library(ggridges)
   library(haven)
   library(here)
   library(paletteer)
   cols <- paletteer_dynamic("cartography::multi.pal", 20)
   conflicts_prefer(dplyr::filter)
```

```{r import data and select genre stereotype variables}
   #importing data
   dat <- read_dta("C:/Users/Omar Lizardo/Google Drive/MISC DATA SOURCES/SSI-2012/SSI2012.dta")
   #replacing ids with character names
   dat <- bind_cols(tibble(id_char = paste("id", sapply(dat[, 1], as.character), sep = "_")), dat) %>% 
   select(id_char, classicalfemale:hvymtluc, -ends_with("none")) %>%  #selecting relevant columns
   na.omit() #removing missing values
   head(dat)
```

```{r Creating individual matrices}
   row.breiger <- function(x) {
      x %*% t(x)
      }
   col.breiger <- function(x) {
      t(x) %*% x
      }
   row.sim <- function(x) {
      a <- rowSums(x)
      b <- a %*% t(a)
      c <- x %*% t(x)
      d <- c/b
      }
   col.sim <- function(x) {
      a <- colSums(x)
      b <- a %*% t(a)
      c <- t(x) %*% x 
      d <- c/b
      }
   den <- rowSums(dat[,2:301])/300
   bad.den <- which(den > .9 | den < 0.1)
   dat2 <- dat[-c(bad.den), 2:301]
   ind.list <- split(dat2, seq(nrow(dat2))) # splitting each row of data frame into list objects
   ind.mat <- lapply(ind.list, function(x) {matrix(as.numeric(x), 20, 15, byrow = TRUE)}) # creating individual two mode network of genre by labels
   r <- c("Classical", "Opera", "Jazz", "Broadway", "Easy", "Big_Band", "Oldies", "Country", "Bluegrass", "Folk", "Gospel", "Latin", "Rap", "Blues", "Reggae", "Pop", "Rock", "AltRock", "Dance", "Metal")
       c <- c("Female", "Male", "White", "Black", "Hispanic", "Asian", "College", "No_College", "Young", "Mid_Age", "Old", "Lower_Class", "Working_Class", "Middle_Class", "Upper_Class")
   ind.mat <- lapply(ind.mat, function(x) {rownames(x) <- r; x}) # naming individual rows
   ind.mat <- lapply(ind.mat, function(x) {colnames(x) <- c; x}) # naming individual columns
   ind.row <- lapply(ind.mat, row.breiger) # individual genre projection
   ind.col <- lapply(ind.mat, col.breiger) # individual label projection
   #ind.row <- lapply(ind.mat, row.sim) # individual genre projection
   #ind.col <- lapply(ind.mat, col.sim) # individual label projection
   row.stack <- matrix(unlist(ind.row), ncol = 20, byrow = TRUE) # genre stacked matrix
   col.stack <- matrix(unlist(ind.col), ncol = 15, byrow = TRUE) # label stacked matrix
   colnames(row.stack) <- r # naming genre stacked matrix columns
   colnames(col.stack) <- c # naming label stacked matrix columns
   rownames(row.stack) <- rep(r, nrow(dat2)) # naming genre stacked matrix rows
   rownames(col.stack) <- rep(c, nrow(dat2)) # naming label stacked matrix rows
   zero.rows.r <- which(rowSums(row.stack) == 0) # which genre stacked matrix rows sum to zero?
   zero.rows.c <- which(rowSums(col.stack) == 0) # which label stacked matrix rows sum to zero?
```

```{r CA Musical Genres}
   row.stack.d <- data.frame(row.stack)
   row.stack.d$genre <- rep(r, nrow(dat2))
   row.stack.d$id <- rep(dat$id_char[-bad.den], each = 20)
   CA.r <- CA(row.stack.d, graph = FALSE, row.sup = zero.rows.r, quali.sup = c(21, 22))
```

```{r CA Social Labels}
   col.stack.d <- data.frame(col.stack)
   col.stack.d$label <- rep(c, nrow(dat2))
   col.stack.d$id <- rep(dat$id_char[-bad.den], each = 15)
   CA.c <- CA(col.stack.d, graph = FALSE, row.sup = zero.rows.c, quali.sup = c(16, 17))
```

```{r Extracting column and supplementary scores for genres and labels}
   plot.dat1 <-  data.frame(CA.r$col$coord) #genre column scores
   plot.dat2 <-  data.frame(CA.c$col$coord) #label column scores
   plot.dat3 <- data.frame(CA.r$quali.sup$coord)[1:20, ] #genre supp. scores
   rownames(plot.dat3) <- gsub("genre.", "", rownames(plot.dat3))
   plot.dat4 <- data.frame(CA.c$quali.sup$coord)[1:15, ] #genre label scores
   rownames(plot.dat4) <- gsub("label.", "", rownames(plot.dat4))
```

```{r Prepping stacked CA data for plotting}
   make.plot.dat <- function(x) { 
      w <-  data.frame(rbind(x)) %>% 
      mutate(col.obj = gsub("\\..*","",rownames(x))) 
      rownames(w) <- 1:nrow(x)
      return(w)
      }
   plot.dat.g <- make.plot.dat(CA.r$row$coord)
   plot.dat.l <- make.plot.dat(CA.c$row$coord)
```


```{r Column Score Similarity Plots}
   h <- 625
   w <- 750
   source(here("make.sim.plot.R"))
   #genre plots
   png(file = here("Plots", "ca-genre-col12.png"), width=w, height=h)
   make.plot(plot.dat1, 1, 2, "blue")
   dev.off()
   png(file = here("Plots", "ca-genre-col13.png"), width=w, height=h)
   make.plot(plot.dat1, 1, 3, "blue")
   dev.off()
   png(file = here("Plots", "ca-genre-col14.png"), width=w, height=h)
   make.plot(plot.dat1, 1, 4, "blue")
   dev.off()
   # label plots
   png(file = here("Plots", "ca-label-col12.png"), width=w, height=h)
   make.plot(plot.dat2, 1, 2, "red")
   dev.off()
   png(file = here("Plots", "ca-label-col13.png"), width=w, height=h)
   make.plot(plot.dat2, 1, 3, "red")
   dev.off()
   png(file = here("Plots", "ca-label-col14.png"), width=w, height=h)
   make.plot(plot.dat2, 1, 4, "red")
   dev.off()
```


```{r}
      p <- ggplot(data = plot.dat.g, aes(x = Dim.1, y = Dim.3))
      p <- p + geom_vline(xintercept = 0, color = "gray")
      p <- p + geom_hline(yintercept = 0, color = "gray")
      p <- p +   stat_density_2d(geom = "polygon", 
                                 aes(alpha=..level.., fill = col.obj), 
                                 bins = 2, color = "white")  
      p <- p + theme_minimal()
      p <- p + guides(color = "none", shape = "none", fill = "none")
      p <- p +   scale_alpha(range = c(0, .35), guide = "none") 
      p <- p + geom_text_repel(data = plot.dat3, 
                               aes(label = rownames(plot.dat3)), 
                               size = 3, 
                               color = "black", 
                               fontface = "bold")
      p
```

   

      p <- p + geom_jitter(aes(shape = col.obj), alpha = 0.15, size = 2)
      p <- p + geom_text(data = w, aes(x = w[, d1], w[, d2], label = rownames(w)), 
                         color = "black", fontface = "bold", size = 5)
      p <- p + xlim(-lim, lim) + ylim(-lim, lim) 
      p <- p + labs(x = paste("Dim.", d1), y = paste("Dim", d2))
      set.seed(seed)
      p <- p + scale_color_manual(values = sample(cols, length(objs)))
      p <- p + scale_fill_manual(values = sample(cols, length(objs)))
      p <- p + theme_minimal() 
      p <- p + theme(axis.text = element_text(size = 20), 
                     axis.title = element_text(size = 24),
                     legend.position = "none")
```


```{r Comparing Genre Scores to Cloud Centroids}
   source(here("make.fuzz.plot.R"))
   h <- 625
   w <- 750
   # genre plots
   png(file = here("Plots", "genre-proto12.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.g, plot.dat3, 1, 2, c("Folk", "Rap", "Classical"))
   dev.off()
   png(file = here("Plots", "genre-proto13.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.g, plot.dat3, 1, 3, c("AltRock", "Opera", "Gospel"))
   dev.off()
   png(file = here("Plots", "genre-proto14.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.g, plot.dat3, 1, 4, c("Reggae", "Easy", "Classical"))
   dev.off()
   # label plots
   png(file = here("Plots", "label-proto12-1.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.l, plot.dat4, 1, 2, c("Asian", "Female", "College"), lim = 1)
   dev.off()  
   png(file = here("Plots", "label-proto12-2.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.l, plot.dat4, 1, 2, c("Hispanic", "Black", "No_College"), lim = 1)
   dev.off()  
   png(file = here("Plots", "label-proto13.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.l, plot.dat4, 1, 3, c("Upper_Class", "Male", "No_College", "Asian"), lim = 1)
   dev.off() 
   png(file = here("Plots", "label-proto14.png"), width=w, height=h)
      make.fuzz.plot(plot.dat.l, plot.dat4, 1, 4, c("Lower_Class", "White", "College"), lim = 1)
   dev.off()
```

```{r Genre Ridge Plots}
      make.ridge.dat <- function(col.dat, ca.rows) {
        b <- col.dat %>% 
         rename(Prot.1 = Dim.1, Prot.2 = Dim.2, Prot.3 = Dim.3) %>% 
         mutate(col.obj = rownames(col.dat)) 
      x <-  data.frame(rbind(ca.rows)) %>% 
         mutate(col.obj = gsub("\\..*","",rownames(ca.rows))) %>% 
         select(-c("Dim.4", "Dim.5")) %>% 
         right_join(b) 
      return(x)
      }
      make.ridge.plot <- function(x, d1, d2, lim = 1) {
      p <- ggplot(data = x, aes(x = x[, d1], 
                                y = reorder(col.obj, x[, d2]),
                                group = col.obj, fill = col.obj, color = col.obj))
      p <- p + geom_density_ridges(alpha = .2, point_alpha = .2, jittered_points = TRUE)
      p <- p + guides(fill = "none", color = "none")
      p <- p + geom_vline(xintercept = 0, color = "black", linewidth = 1.25)
      p <- p + scale_color_manual(values = cols)
      p <- p + theme(axis.text = element_text(size = 20), 
                     axis.title = element_text(size = 24))
      p <- p + labs(x = paste("Dim.", d1))
      p <- p + theme_ridges() + xlim(-lim, lim) + labs(y = "") 
      return(p)
      }
   # genres
   ridge.dat.g <- make.ridge.dat(plot.dat1, CA.r$row$coord)
   png(file = here("Plots", "genre-ridge-dim1.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.g, 1, 5)
   dev.off()
   png(file = here("Plots", "genre-ridge-dim2.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.g, 2, 6)
   dev.off()
   png(file = here("Plots", "genre-ridge-dim3.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.g, 3, 7)
   dev.off()
   #labels
   ridge.dat.l <- make.ridge.dat(plot.dat2, CA.c$row$coord)
   png(file = here("Plots", "label-ridge-dim1.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.l, 1, 5)
   dev.off()
   png(file = here("Plots", "label-ridge-dim2.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.l, 2, 6)
   dev.off()
   png(file = here("Plots", "label-ridge-dim3.png"), width=w, height=h)
   make.ridge.plot(ridge.dat.l, 3, 7)
   dev.off()
```
       

